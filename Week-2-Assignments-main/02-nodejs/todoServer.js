/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,

  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');

const app = express();

app.use(bodyParser.json());

app.listen(3000, () => {
  console.log("Server is running on 3000...");
})

let randomId = () => {
  return Math.floor(Math.random() * 10000);
}

let  todos = [
  {
    id : randomId(),
    title: "Running",
    description: "4 km in the evening."
  },
  {
    id : randomId(),
    tilte: "Cooking meal",
    description: "Prepare dinner"
  },
  {
    id : randomId(),
    title: "Do assignment",
    description: "Coding for a while."
  }
]

app.get('/todos', (req, res ) => {
  if(todos.length < 1){
    res.send("There aren't any todo available.")
  } else {
    res.status(200).send(todos);
  }
})

app.get('/todos/:id', (req, res) => {
  let targetId = parseInt(req.params.id); // the id in the url is string, you have to convert into int before using it.
  let targetTodo = todos.find(todo => (targetId === todo.id));
  if(!targetTodo){
    res.status(404).send("Not found!");
  } else{
    res.status(200).send(targetTodo);
  }
})

app.post('/todos', (req, res) => {
  let newTodo = req.body;
  newTodo.id = Math.floor(Math.random() * 10000);
  todos.push(newTodo);
  res.status(200).send(todos);
})

app.put('/todos/:id', (req, res) => {
  let targetId = parseInt(req.params.id); // the id in the url is string, you have to convert into int before using it.
  let targetTodo = todos.find(todo => (targetId === todo.id));
  targetTodo.id = req.body.id;
  targetTodo.title = req.body.title;
  targetTodo.description = req.body.description;

  res.send(todos);
})

app.delete('/todos/:id', (req, res) => {
  let targetId = parseInt(req.params.id); // the id in the url is string, you have to convert into int before using it.
  let targetTodoIndex = todos.findIndex(todo => (targetId === todo.id));
  if(targetTodoIndex !== -1){
    let deletedElement = todos.splice(targetTodoIndex, 1);

    if(deletedElement){
      res.status(200).send("the todo item was found and deleted");
    } else{
      res.status(400).send("Not found!");
    }
  }

})

app.all('*', (req, res) => {
  res.status(404).send("Page not found!");
})

module.exports = app;

// What i did wrong is 